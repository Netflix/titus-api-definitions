syntax = "proto3";

// Titus autoscaling API specification.
//

package com.netflix.titus;

import "google/protobuf/empty.proto";
import "netflix/titus/titus_job_api.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";

option go_package = "./netflix/titus";

// Describes an alarm configuration.
//  Note that this is currently only use for step scaling.
message AlarmConfiguration {
  // Types of operators for metric comparison.
  enum ComparisonOperator {
    GreaterThanOrEqualToThreshold = 0;
    GreaterThanThreshold = 1;
    LessThanThreshold = 2;
    LessThanOrEqualToThreshold = 3;
  }

  // Types of metric statistics.
  enum Statistic {
    SampleCount = 0;
    Average = 1;
    Sum = 2;
    Minimum = 3;
    Maximum = 4;
  }

  // Indicates whether actions should be executed during any changes to the
  // alarm state.
  google.protobuf.BoolValue actionsEnabled = 1;
  // The number of periods over which data is compared to the specified
  // threshold.
  oneof comparisonOpOneof { ComparisonOperator comparisonOperator = 2; }
  // The number of periods over which data is compared to the specified
  // threshold.
  google.protobuf.Int32Value evaluationPeriods = 3;
  // The period, in seconds, over which the specified statistic is applied.
  google.protobuf.Int32Value periodSec = 4;
  // The value against which the specified statistic is compared.
  google.protobuf.DoubleValue threshold = 5;
  // The namespace for the metric associated with the alarm.
  string metricNamespace = 6;
  // The name for the metric associated with the alarm.
  string metricName = 7;
  // The statistic for the metric associated with the alarm, other than
  // percentile.
  oneof statisticOneof { Statistic statistic = 8; }
  // The dimensions for the metric specified in MetricName.
  repeated MetricDimension metricDimensions = 9;
}

// Describes step adjustment options
message StepAdjustments {
  // The statistic for the metric associated with the alarm, other than
  // percentile.
  google.protobuf.DoubleValue MetricIntervalLowerBound = 1;
  // The upper bound for the difference between the alarm threshold and the
  // CloudWatch metric.
  google.protobuf.DoubleValue MetricIntervalUpperBound = 2;
  // The amount by which to scale, based on the specified adjustment type.
  google.protobuf.Int32Value scalingAdjustment = 3;
}

// Describes a step scaling configuration
message StepScalingPolicy {
  // Types of scaling adjustments.
  enum AdjustmentType {
    ChangeInCapacity = 0;
    PercentChangeInCapacity = 1;
    ExactCapacity = 2;
  }

  // Types of aggregation for metrics.
  enum MetricAggregationType {
    Minimum = 0;
    Maximum = 1;
    Average = 2;
  }

  // The adjustment type, which specifies how the ScalingAdjustment parameter
  // in a StepAdjustment is interpreted.
  oneof adjustmentTypeOneof { AdjustmentType adjustmentType = 1; }
  // The amount of time, in seconds, after a scaling activity completes where
  // previous trigger-related scaling activities can influence future scaling
  // events.
  google.protobuf.Int32Value cooldownSec = 2;
  // The minimum number to adjust your scalable dimension as a result of a
  // scaling activity.
  google.protobuf.Int64Value minAdjustmentMagnitude = 3;
  // The aggregation type for the CloudWatch metrics.
  oneof metricAggOneof { MetricAggregationType metricAggregationType = 4; }
  // A set of adjustments that enable you to scale based on the size of the
  // alarm breach.
  repeated StepAdjustments stepAdjustments = 5;
}

// Describes the defintion of step scaling policy
message StepScalingPolicyDescriptor {
  // Alarm config
  AlarmConfiguration alarmConfig = 1;

  // Step policy config
  StepScalingPolicy scalingPolicy = 2;
}

// Configures a predefined metric for a target tracking policy.
message PredefinedMetricSpecification {
  // The metric type.
  string predefinedMetricType = 1;

  // Reserved for future use.
  string resourceLabel = 2;
}

// Describes the dimension of a metric.
message MetricDimension {
  // The name of the dimension.
  string name = 1;

  // The value of the dimension.
  string value = 2;
}

// Configures a customized metric for a target tracking policy.
message CustomizedMetricSpecification {
  // The dimensions of the metric.
  repeated MetricDimension dimensions = 1;

  // The name of the metric.
  string metricName = 2;

  // The namespace of the metric.
  string namespace = 3;

  // The statistic of the metric.
  oneof statisticOneof { AlarmConfiguration.Statistic statistic = 4; }

  // The unit of the metric.
  string unit = 5;
}

// Describes the definition of a target tracking policy
message TargetTrackingPolicyDescriptor {
  // The target value for the metric.
  google.protobuf.DoubleValue targetValue = 1;

  // The amount of time, in seconds, after a scale out activity completes
  // before another scale out activity can start.
  google.protobuf.Int32Value scaleOutCooldownSec = 2;

  // The amount of time, in seconds, after a scale in activity completes before
  // another scale in activity can start.
  google.protobuf.Int32Value scaleInCooldownSec = 3;

  // A predefined metric.
  PredefinedMetricSpecification predefinedMetricSpecification = 4;

  // Indicates whether scale in by the target tracking policy is disabled.
  google.protobuf.BoolValue disableScaleIn = 5;

  // Configures a customized metric for a target tracking policy.
  CustomizedMetricSpecification customizedMetricSpecification = 6;
}

// Describes a generic scaling policy
message ScalingPolicy {
  // Must be one of these scaling types
  oneof ScalingPolicyDescriptor {
    StepScalingPolicyDescriptor stepPolicyDescriptor = 1;
    TargetTrackingPolicyDescriptor targetPolicyDescriptor = 2;
  }
}

// A scaling policy identifier
message ScalingPolicyID {
  // ID of the policy
  string id = 1;
}

// Describes the status of a policy
message ScalingPolicyStatus {
  // State information associated with a task.
  enum ScalingPolicyState {

    // A policy is waiting to be applied
    Pending = 0;

    // A policy has been fully applied
    Applied = 1;

    // A policy is being removed
    Deleting = 2;

    // A policy has been removed
    Deleted = 3;

    // A policy creation error
    Error = 4;
  }

  // State of the policy
  ScalingPolicyState state = 1;

  // (Optional) Textual description of why a policy is pending.
  string pendingReason = 3;
}

// Message that describes the config and status of a policy
message ScalingPolicyResult {
  // Titus Job that the policy is associated with
  string jobId = 1;

  // Titus-specific policy identifier
  ScalingPolicyID id = 2;

  // Describes the scaling policy
  ScalingPolicy scalingPolicy = 3;

  // Status of the policy
  ScalingPolicyStatus policyState = 4;
}

// Message describing multiple policies
message GetPolicyResult {
  // Scaling policies found
  repeated ScalingPolicyResult items = 1;
}

// Message to apply a scaling policy to a job
message PutPolicyRequest {
  // Job to apply policy too
  string jobId = 1;

  // Policy to apply
  ScalingPolicy scalingPolicy = 2;
}

// Message representing request for updating policy
message UpdatePolicyRequest {
  // Policy ID for the policy that'll be updated
  ScalingPolicyID policyId = 1;

  // Policy to apply
  ScalingPolicy scalingPolicy = 2;
}

message DeletePolicyRequest {

  // Scaling policy to delete
  ScalingPolicyID id = 1;
}

service AutoScalingService {
  // Returns all policies
  rpc GetAllScalingPolicies(google.protobuf.Empty) returns (GetPolicyResult) {}

  // Returns a specific policy
  rpc GetScalingPolicy(ScalingPolicyID) returns (GetPolicyResult) {}

  // Returns all policies for a job
  rpc GetJobScalingPolicies(JobId) returns (GetPolicyResult) {}

  // Add a scaling policy to a job
  rpc SetAutoScalingPolicy(PutPolicyRequest) returns (ScalingPolicyID) {}

  // Remove a scaling policy from a job
  rpc DeleteAutoScalingPolicy(DeletePolicyRequest)
      returns (google.protobuf.Empty) {}

  rpc UpdateAutoScalingPolicy(UpdatePolicyRequest)
      returns (google.protobuf.Empty) {}
}
