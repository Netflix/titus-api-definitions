syntax = "proto3";

// Titus job activity API specification.
//

package com.netflix.titus;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "netflix/titus/titus_base.proto";
import "netflix/titus/titus_job_api.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "JobActivityHistoryProto";

option go_package = "./netflix/titus";

message JobActivityQuery {
    string jobId = 1;
}

message ActivityRecord {

    message Caller {

        /// (Required) A caller identifier. Depending on the user identity (a user or an application), the format
        // of the id may be different. For example a user's id could be their email address, and application's id its name.
        string id = 1;

        /// (Optional) The caller type.
        CallerType type = 2;

        /// (Optional) Additional data associated with the caller. Key names starting with 'titus' are reserved for Titus.
        //  Predefined context keys:
        //  * 'titus.service.name' - name of the service that is invoked
        //  * 'titus.service.method' - nome of the method that is invoked
        //  * 'titus.transport.type' - transport type (HTTP/GRPC)
        //  * 'titus.transport.secure' - true for TLS, false for plain text
        map<string, string> context = 3;
    }

    enum CallerType {
        Unknown = 0;

        Application = 1;

        User = 2;
    }

    message TaskInfo {
        string taskId = 1;
        string taskState = 2;
    }

    /// job id
    string jobId = 1;
    /// job state
    string jobState = 2;
    /// time when the state transition occurred
    uint64 timestamp = 3;
    /// The first item in the list is the original caller, followed by a sequence of intermediaries via which the
    // original call was relayed.
    repeated Caller callers = 4;
    /// call reason
    string callReason = 5;
    /// (Optional) An identifier of an event that caused a transition to this state. Each job manager can introduce its own
    //  set of reason codes. As of now, there are no common reason codes defined for jobs.
    string reasonCode = 6;
    /// (Optional) Textual description accompanying the 'reasonCode'.
    string reasonMessage = 7;
    /// (Optional) Task info
    TaskInfo taskInfo = 8;
}

message ActivityQueryResult {
    repeated ActivityRecord items = 1;
}

service JobActivityHistoryService {
    // Return a collection of activity records for a given job
    rpc ViewScalingActivities(JobId) returns (ActivityQueryResult) {
    }
}
