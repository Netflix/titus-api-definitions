syntax = "proto3";

package com.netflix.titus;

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "TitusBase";

option go_package = "./netflix/titus";
import "google/protobuf/struct.proto";
import "netflix/titus/titus_volumes.proto";

// ----------------------------------------------------------------------------
// Supplementary data structures

// Call metadata (caller's identity, call path).
message CallMetadata {

  enum CallerType {
    Unknown = 0;

    Application = 1;

    User = 2;
  }

  message Caller {

    // (Required) A caller identifier. Depending on the user identity (a user
    // or an application), the format
    // of the id may be different. For example a user's id could be their email
    // address, and application's id its name.
    string id = 1;

    // (Optional) The caller type.
    CallerType type = 2;

    // (Optional) Additional data associated with the caller. Key names
    // starting with 'titus' are reserved for Titus.
    //  Predefined context keys:
    //  * 'titus.service.name' - name of the service that is invoked
    //  * 'titus.service.method' - nome of the method that is invoked
    //  * 'titus.transport.type' - transport type (HTTP/GRPC)
    //  * 'titus.transport.secure' - true for TLS, false for plain text
    map<string, string> context = 3;
  }

  // (Required) The original caller identifier. Depending on the user identity
  // (a user or an application), the format
  // of the id may be different. For example a user's id could be their email
  // address, and application's id its name.
  //  (Deprecated) Use 'caller' field instead.
  string callerId = 1 [ deprecated = true ];

  // The first item in the list is the original caller, followed by a sequence
  // of intermediaries via which the
  //  original call was relayed.
  repeated Caller callers = 5;

  // (Optional) The reason why a call was made.
  string callReason = 2;

  // (Optional) The list of intermediaries via which a call was relayed.
  //  (Deprecated) Use 'caller' field instead.
  repeated string callPath = 3 [ deprecated = true ];

  // (Optional) If set to true, a diagnostic information is provided if a
  // request fails.
  bool debug = 4;
}

// An entity representing single page of a collection. Prefer using
// cursor-based pagination, pageNumber is being retired.
//  For the first page, leave both pageNumber and cursor empty.
message Page {
  // (Optional) Requested page number, starting from 0 (defaults to 0 if not
  // specified).
  //  (Deprecated) Use cursor-based pagination instead.
  int32 pageNumber = 1 [ deprecated = true ];

  // (Required) Requested page size (if not specified, default size is
  // operation specific).
  int32 pageSize = 2;

  // (Optional) The position in the collection from which the next page should
  // be returned. If the cursor value is set, it is
  // always used, irrespective of the page number set.
  string cursor = 3;
}

// An entity representing pagination information returned to a client iterating
// over its elements.
// It includes current page that the client requested, and the total collection
// size. As not always pageCount * pageSize == itemCount, the item count is
// included as well.
message Pagination {
  // (Required) Requested page details.
  Page currentPage = 1;

  // Are there any more items to return? Use the cursor to fetch the next page
  // when required.
  bool hasMore = 2;

  // (Deprecated) Use cursor-based pagination instead. Total number of pages.
  int32 totalPages = 3 [ deprecated = true ];

  // Total number of items.
  int32 totalItems = 4;

  // The last retrieved item's position in the collection. The cursor value can
  // be sent on a subsequent request to
  // get the next page of items. Using cursors, instead of page numbers, will
  // guarantee that all items are retrieved with a potential of items being
  // duplicated.
  string cursor = 5;

  // Position of the cursor relative to totalItems. It can be used to determine
  // what pageNumber would overlap with a
  // cursor, or to provide an idea of progress when walking all pages. Valid
  // values are [0, totalItems-1].
  int32 cursorPosition = 6;
}

// Retry polices.
message RetryPolicy {
  // Re-run immediately.
  message Immediate {
    // Maximum number of retries.
    uint32 retries = 1;
  }

  // Re-run after a given delay.
  message Delayed {
    // Initial delay in milliseconds.
    uint64 initialDelayMs = 1;

    // Subsequent delays in milliseconds.
    uint64 delayMs = 2;

    // Maximum number of retries.
    uint32 retries = 3;
  }

  // Exponential back-off retry policy.
  message ExponentialBackOff {
    // Initial delay in milliseconds.
    uint64 initialDelayMs = 1;

    // Upper bound on delay interval.
    uint64 maxDelayIntervalMs = 2;

    // Maximum number of retries.
    uint32 retries = 3;
  }

  // (Required) Retry policy.
  oneof Policy {
    Immediate immediate = 1;
    Delayed delayed = 2;
    ExponentialBackOff exponentialBackOff = 3;
  }
}

// Token bucket policies
message TokenBucketPolicy {
  message FixedIntervalRefillStrategy {
    uint64 refillRate = 3;

    uint64 intervalMs = 4;
  }

  uint64 capacity = 1;

  uint64 initialNumberOfTokens = 2;

  oneof RefillStrategy {
    FixedIntervalRefillStrategy fixedIntervalRefillStrategy = 3;
  }
}

// Titus scheduler tier (see Titus scheduler documentation for more
// information).
enum Tier {
  // Tier for running latency insensitive batch workloads.
  Flex = 0;

  // Tier for running latency sensitive workloads.
  Critical = 1;
}

// Titus hierarchy level.
enum Level {
  SystemLevel = 0;
  TierLevel = 1;
  CapacityGroupLevel = 2;
  JobLevel = 3;
  TaskLevel = 4;
}

// A reference to an entity in the Titus hierarchy.
message Reference {
  message System {}

  oneof Reference {
    // System level.
    System system = 1;

    // Tier level
    Tier tier = 2;

    // A capacity group level, with the capacity group name as a value.
    string capacityGroup = 3;

    // Job id.
    string jobId = 4;

    // Task id.
    string taskId = 5;
  }
}

// Disk mount permission mask
enum MountPerm {
  // Read only
  RO = 0;

  // Write only
  WO = 1;

  // Read/write
  RW = 2;
}

// Instance resource dimensions
message ResourceDimension {
  uint32 cpu = 1;

  uint32 gpu = 2;

  uint32 memoryMB = 3;

  uint32 diskMB = 4;

  uint32 networkMbps = 5;
}

// Time related data structures.

enum Day {
  Monday = 0;
  Tuesday = 1;
  Wednesday = 2;
  Thursday = 3;
  Friday = 4;
  Saturday = 5;
  Sunday = 6;
}

// Time window descriptor.
message TimeWindow {

  message HourlyTimeWindow {
    // (Required) Starting hour.
    uint32 startHour = 1;

    // (Required) Ending hour.
    uint32 endHour = 2;
  }

  // (Required) Included days.
  repeated Day days = 1;

  // (Optional) Included hour ranges. If not set, defaults to 0-24.
  repeated HourlyTimeWindow hourlyTimeWindows = 2;

  // (Optional) If not set, UTC time zone is set as a default.
  string timeZone = 3;
}

// A provider for container health
message ContainerHealthProvider {

  // (Required) The name of the provider.
  string name = 1;

  // (Optional) Attributes to be used by the provider.
  map<string, string> attributes = 3;
}

// The location within the VPC where the address exists.
message AddressLocation {

  // (Required) Region the address exists in.
  string region = 1;

  // (Required) Availability zone the address exists in.
  string availabilityZone = 2;

  // (Required) Subnet the address exists in.
  string subnetId = 3;
}

// An IP address allocation from the Titus VPC service.
message AddressAllocation {

  // (Required) The location of the address within the VPC.
  AddressLocation addressLocation = 1;

  // (Required) A valid UUID4. It should be set during VPC service allocation,
  // if unset, one will be set for you.
  string uuid = 2;

  // (Required) The VPC IP address. The address must be unset when requesting
  // an allocation from the VPC service.
  string address = 3;
};

message StaticIPAddressIDs {
  // (Required) A list of valid UUIDs
  repeated string uuids = 1;
}

// An IP address allocation signed by the Titus VPC service.
message SignedAddressAllocation {

  // (Required) The IP address and metadata that was allocated.
  AddressAllocation addressAllocation = 1;

  // This is an x509v3 signed version of the address allocation.
  bytes signedAddressAllocation = 2 [ deprecated = true ];

  // authoritative publicKey is the key that came from the database
  bytes authoritativePublicKey = 3;
  // the hostPublicKey is the ephemeral public key
  bytes hostPublicKey = 4;
  // hostPublicKeySignature is the signature of the authoratative key signing
  // the hostPublicKey
  bytes hostPublicKeySignature = 5;
  // serialized version of the addressAllocation message
  bytes message = 6;
  // the resultant signature
  bytes messageSignature = 7;
};

// ----------------------------------------------------------------------------
// Data model used in the durable storage.

// Data record type independent metadata information.
message DataRecordMetadata {

  // Description of why new version of the data was created.
  string description = 1;

  // Identification of the person who changed the data.
  CallMetadata callMetadata = 2;

  // Time of change.
  uint64 timestamp = 3;
}

// ----------------------------------------------------------------------------
// Metadata.

// An entity version data.
message Version {
  // Entity last update time.
  uint64 timestamp = 1;

  // TODO Add revisionId once the global ordering concept is clarified.
  // Discussed options:
  // - use etcd leader revision id for cell-level version ordering
  // Revision number associated with the given entity version. Revision numbers
  // are globally increasing within a collection. For example, a collection of
  // jobs and their tasks will have a single revision counter which is
  // incremented if some job or task entity is created/updated.
  // uint64 revision = 2;
}

// BasicContainer stores the minimal data required to declare extra containers
// to a job. This is in contrast to the Container message, which has other data
// that are not strictly tied to the main container. For example,
// *resources* (ram/cpu/etc) for the whole *task* are declared in the main
// Container message, not in a basic container.
message BasicContainer {
  // (Required) the Name of this container
  string name = 1;

  // (Required) Image reference.
  Image image = 2;

  // (Optional) Override the entrypoint of the image.
  // If set, the command baked into the image (if any) is always ignored.
  // Interactions between the entrypoint and command are the same as specified
  // by Docker:
  // https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
  // Note that, unlike the main container, no string splitting occurs.
  repeated string entryPoint = 3;

  // (Optional) Additional parameters for the entrypoint defined either here
  // or provided in the container image.
  // Note that, unlike the main container, no string splitting occurs.
  repeated string command = 4;

  // (Optional) A collection of system environment variables passed to the
  // container.
  map<string, string> env = 5;

  // (Optional) An array of VolumeMounts. These VolumeMounts will be mounted in
  // the container, and must reference one of the volumes declared for the Job.
  // See the k8s docs
  // https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#volumemount-v1-core
  // for more technical details.
  repeated VolumeMount volumeMounts = 6;
}

// To reference an image, a user has to provide an image name and a version. A
// user may specify a version either with
// a tag value (for example 'latest') or a digest. When submitting a job, a user
// should provide either a tag or a digest value only (not both of them).
//
// For example, docker images can be referenced by {name=titus-examples,
// tag=latest}. A user could also choose to provide only the digest without a
// tag. In this case, the tag value would be empty.
message Image {
  // (Required) Image name.
  string name = 1;

  // (Required if digest not set) Image tag.
  string tag = 2;

  // (Required if tag not set) Image digest.
  string digest = 3;
}

// Definition of a request to add a platform sidecar alongside a task
// Note that this is *not* a user-defined sidecar, that is why it just has a
// name. These platform-sidecars are attached a task start time, and the
// definition of what the sidecar is is not baked into the job itself, just the
// intent.
message PlatformSidecar {
  // (Required) Name of the platform sidecar requested
  string name = 1;

  // (Optional) Channel representing a pointer to releases of the sidecar
  string channel = 2;

  // (Optional) Arguments, KV pairs for configuring the sidecar
  google.protobuf.Struct arguments = 3;
}
