syntax = "proto3";

// Resource Management API Specification.

package com.netflix.titus.v4;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "netflix/titus/titus_base.proto";
import "netflix/titus/v4/common_api.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "ResourceManagementProto";

option go_package = "titus";

// ----------------------------------------------------------------------------
// Common data structures

message MachineResources {
    double cpu = 1;

    uint32 gpu = 2;

    uint32 memoryMB = 3;

    uint32 diskMB = 4;

    uint32 networkMbps = 5;
}

message HealthCondition {
    enum HealthConditionStatus {
        /// The health condition status is not known.
        Unknown = 0;

        /// This item is unhealthy and should not be used.
        Unhealthy = 1;

        /// This item is healthy and can be used.
        Healthy = 2;
    }

    /// The name of the health condition.
    string name = 1;

    /// The status of the healthy condition.
    HealthConditionStatus status = 2;

    /// The timestamp the condition was last updated.
    uint64 lastUpdateTime = 3;

    /// The reason why the condition was updated.
    string reason = 4;

    /// Informational message about the condition.
    string message = 5;
}

message Machine {
    /// The id of the machine
    string id = 1;

    /// The common metadata
    Metadata metadata = 2;

    /// The total resources of a machine
    MachineResources totalResources = 3;

    /// The total unallocated resources of a machine
    MachineResources unallocatedResources = 4;

    /// The total unused resources of a machine
    MachineResources unusedResources = 5;

    /// The external resources of a machine
    repeated ExternalResourceInstance externalResources = 6;

    /// The health conditions of a machine
    repeated HealthCondition healthConditions = 7;

    /// The labels of a machine
    map<string, string> labels = 8;
}

/// Instances of this message specify required resources to run a container. Resource description is different
//  from resource allocation, which is covered by `ExternalResourceInstance` type.
message ExternalResourceDescriptor {
    /// Describes properties of the network interface connected to a container.
    message NetworkConnectivity {

        /// Set to `true` if IPv4 address should be assigned to a container. Each container must be associated always
        //  with at least one IP address.
        bool assignIpv4 = 1;

        /// Set to `true` if IPv6 address should be assigned to a container. Each container must be associated always
        //  with at least one IP address.
        bool assignIpv6 = 2;

        /// (Required) Security group names associated with an allocated network interface. At least one group
        //  must be specified.
        repeated string securityGroups = 3;
    }

    /// Describes a container image, which before a container is run is resolved to a digest.
    //  The `ExternalResourceInstance` counterpart stores always the image digest.
    message Image {
        string name = 1;

        string tag = 2;

        string digest = 3;
    }

    /// A container security context.
    message SecurityContext {
        /// (Required) Relative or absolute IAM role name.
        string iamRole = 1;

        /// (Optional) Security domain associated with a container, which may by used during the authorization process.
        string securityDomain = 2;
    }

    oneof Descriptor {
        NetworkConnectivity networkConnectivity = 1;

        Image image = 2;

        SecurityContext awsSecurity = 3;
    }
}

/// `ExternalResourceInstance` represents both allocated and non-allocated resources.
message ExternalResourceInstance {
    /// A network interface instance that can be associated with a container.
    message NetworkInterface {
        /// A unique interface id.
        string id = 1;

        /// Set to `true` if the network interface is attached to a machine, and `false` otherwise.
        bool attached = 2;

        /// Maximum amount of IPs that can be attached to the given interface.
        uint32 ipLimit = 3;

        /// Security groups associated with the network interface.
        repeated string securityGroups = 4;

        /// Network interface labels, like AWS resource id.
        map<string, string> labels = 5;
    }

    /// An IP address allocation for a container.
    message IpAddress {
        /// Id of the network interface that is associated with the given IP address.
        string networkInterfaceId = 1;

        /// Allocated IPv4 address or an empty string if none is allocated.
        string ipv4Address = 2;

        /// Allocated IPv6 address or an empty string if none is allocated.
        string ipv6Address = 3;
    }

    /// A resolved image digest.
    message Image {
        string digest = 1;
    }

    /// A container security context.
    message SecurityContext {
        /// A normalized IAM role ARN.
        string iamRoleArn = 1;
    }

    oneof Instance {
        NetworkInterface eni = 1;

        IpAddress ipAddress = 2;

        Image image = 3;

        SecurityContext awsSecurity = 4;
    }
}

// ----------------------------------------------------------------------------
// Core data structures

/// Data structure representing resources assigned to a task.
message MachineResourcesAllocationStatus {
    enum MachineResourcesAllocationState {
        /// Resource allocation request accepted. No machine is assigned yet.
        Accepted = 0;

        /// Resources requested on a machine, and the machine is ready yet to run a container.
        Ready = 1;

        /// Resources requested on a machine, but the machine is not ready yet to run a container.
        NotReady = 2;

        /// A container is started.
        InUse = 4;

        /// Resource release requested.
        ReleaseRequested = 5;

        /// Resources are being released.
        Releasing = 6;

        /// Resources are released.
        Released = 7;
    }

    MachineResourcesAllocationState state = 1;

    string reasonCode = 2;

    string reasonMessage = 3;

    uint64 timestamp = 4;

    /// Id of a container that is associated with this allocation. Required in state 'InUse' and 'AfterUseCleanup'.
    string containerId = 5;
}

message MachineResourcesAllocationDescriptor {

    /// (Required) Priority of this allocation. The following priority ranges are defined:
    //  - 0..100 - high priority, not evictable workloads
    //  - 100...1000 - high priority, evictable workloads
    //  - 1000... - best effort workloads
    uint32 priority = 1;

    /// (Required) Container resources.
    MachineResources machineResources = 2;

    /// External resources.
    repeated ExternalResourceDescriptor externalResources = 3;

    /// (Optional) Arbitrary set of key/value pairs. Key names starting with 'titus.' are reserved by Titus.
    map<string, string> labels = 4;
}

message MachineResourcesAllocation {
    /// (Required) Reservation id.
    string id = 1;

    /// (Required) Metadata.
    Metadata metadata = 2;

    /// (Required) Resource allocation descriptor.
    MachineResourcesAllocationDescriptor descriptor = 3;

    /// Id of an instance which is associated with this reservation, or empty if assignment is not done yet.
    string machineId = 4;

    /// Assigned machine resources, or empty if assignment is not done yet.
    MachineResources assignedMachineResources = 5;

    /// Assigned external resources, or empty if assignment is not done yet.
    repeated ExternalResourceInstance assignedExternalResources = 6;

    /// (Required) Current status.
    MachineResourcesAllocationStatus status = 7;

    /// (Required) State transition history.
    repeated MachineResourcesAllocationStatus statusHistory = 8;
}

message ContainerStatus {
    /// State information associated with a task.
    enum ContainerState {
        Accepted = 0;
        Starting = 1;
        Started = 2;
        TerminateRequested = 3;
        Terminating = 4;
        Finished = 5;
    }

    ContainerState state = 1;

    string reasonCode = 2;

    // technical message versus user readable message?
    string reasonMessage = 3;

    uint64 timestamp = 4;
}

message ContainerDescriptor {
    string allocationId = 1;

    /// (Optional) Override the entry point of the image.
    repeated string entryPoint = 2;

    /// (Optional) Additional parameters for the entry point defined either here or provided in the container image.
    repeated string command = 3;

    /// (Optional) A collection of system environment variables passed to the container.
    map<string, string> environment = 4;

    map<string, string> labels = 5;
}

message Container {
    string id = 1;

    Metadata metadata = 2;

    ContainerDescriptor descriptor = 3;

    /// (Required) Last known state of this task.
    ContainerStatus status = 4;

    /// (Required) State transition history.
    repeated ContainerStatus statusHistory = 5;
}

/// Machine Management Service Messages
message MachineEvent {
    message MachineUpdate {
        MachineEvent allocation = 1;
    }
    message SnapshotEnd {
    }
    oneof Notification {
        MachineUpdate allocationUpdate = 1;
        SnapshotEnd snapshotEnd = 2;
    }
}

message AddMachineLabelsRequest {
    string id = 1;

    map<string, string> labels = 2;
}

message RemoveMachineLabelsRequest {
    string id = 1;

    repeated string keys = 2;
}

/// Machine Management Service
service MachineManagementService {
    /// Get machine with a specified Id
    rpc GetMachine (Id) returns (Machine) {
    }

    /// Get machines
    rpc GetMachines (QueryRequest) returns (stream Machine) {
    }

    /// Get machine events
    rpc Events (EventQuery) returns (stream MachineEvent) {
    }

    /// Add labels to a machine
    rpc AddMachineLabels (AddMachineLabelsRequest) returns (stream Machine) {
    }

    /// Remove labels from a machine
    rpc RemoveMachineLabels (RemoveMachineLabelsRequest) returns (stream Machine) {
    }
}

/// Machine Resources Allocation Service Messages
message CreateAllocationRequest {
    MachineResourcesAllocationDescriptor descriptor = 1;
    uint32 ttl = 2;
}

message MachineResourcesAllocationEvent {
    message MachineResourcesAllocationUpdate {
        MachineResourcesAllocationEvent allocation = 1;
    }
    message SnapshotEnd {
    }
    oneof Notification {
        MachineResourcesAllocationUpdate allocationUpdate = 1;
        SnapshotEnd snapshotEnd = 2;
    }
}

message AddAllocationLabelsRequest {
    string id = 1;

    map<string, string> labels = 2;
}

message RemoveAllocationLabelsRequest {
    string id = 1;

    repeated string keys = 2;
}

/// Machine Resources Allocation Service
service MachineResourcesAllocationService {
    /// Create an allocation
    rpc CreateAllocation (CreateAllocationRequest) returns (MachineResourcesAllocation) {
    }

    /// Get an allocation with a specified Id
    rpc GetAllocation (Id) returns (MachineResourcesAllocation) {
    }

    /// Get allocations
    rpc GetAllocations (QueryRequest) returns (stream MachineResourcesAllocation) {
    }

    /// Delete an allocation with a specified Id
    rpc DeleteAllocation (Id) returns (google.protobuf.Empty)

    /// Get allocation events
    rpc Events (EventQuery) returns (stream MachineResourcesAllocationEvent) {
    }

    /// Add labels to allocation
    rpc AddAllocationLabels (AddAllocationLabelsRequest) returns (stream Machine) {
    }

    /// Remove labels from allocation
    rpc RemoveAllocationLabels (RemoveAllocationLabelsRequest) returns (stream Machine) {
    }
}

/// Container Management Service
message CreateContainerRequest {
    /// The allocation to use
    string allocationId = 1;

    /// The container descriptor
    ContainerDescriptor descriptor = 2;
}

message DeleteContainerRequest {
    string containerId = 1;

    uint64 gracePeriod = 2; //new name?

    uint64 systemContainersGracePeriod = 3; //differentiate between use container deadline versus system containers like log uploading?
}

message ContainerEvent {
    message ContainerUpdate {
        Container container = 1;
    }
    message SnapshotEnd {
    }
    oneof Notification {
        ContainerUpdate = 1;
        SnapshotEnd snapshotEnd = 2;
    }
}

service ContainerManagementService {
    /// Create a container with a specified allocation
    rpc CreateContainer (CreateContainerRequest) returns (Container) {
    }

    /// Get a container with a specific id
    rpc GetContainer (Id) returns (Container) {
    }

    /// Get containers based on the query
    rpc GetContainers (QueryRequest) returns (stream Container) {
    }

    /// Delete a container
    rpc DeleteContainer (DeleteContainerRequest) returns (Container)

    /// Get all container events
    rpc Events (EventQuery) returns (stream ContainerEvent) {
    }
}