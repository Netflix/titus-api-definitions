syntax = "proto3";

// Titus task relocation API specification.
//

package com.netflix.titus;

import "google/protobuf/empty.proto";
import "netflix/titus/titus_base.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "TaskRelocationProto";

option go_package = "titus";

// ----------------------------------------------------------------------------
// Task relocation core data structures

message TaskRelocationPlan {
    /// (Required) Id of a task to relocate.
    string taskId = 1;

    /// (Required) Relocation reason code. Currently defined reason codes are:
    //  * 'migrationFromDeprecatedAgent'
    //  * 'evacuationFromBadAgent'
    //  * 'evacuationFromQuarantinedAgent'
    //  * 'defragmentation'
    string reasonCode = 2;

    /// (Optional) Human readable text providing more details on why the relocation is needed.
    string reasonMessage = 3;

    /// (Optional) The earliest time at which the relocation may happen. Until that time, an owner of the task
    //   may chose to do the relocation themselve.
    uint64 relocationAfter = 4;
}

message TaskRelocationStatus {
    enum TaskRelocationState {
        /// Reason codes:
        //  * 'normal'
        Success = 0;

        /// Reason codes:
        //  * 'noDisruptionBudget'
        Failure = 1;
    }

    /// (Required) Execution result. Each task relocation state is associated with a different set of the reason codes.
    string reasonCode = 2;

}

/// An execution status for a single relocation plan.
message TaskRelocationResult {
    /// (Required) Executed task relocation plan.
    TaskRelocationPlan taskRelocationPlan = 1;

    /// (Required) An orderd list of relocation attempts, starting from the oldest one to the latest.
    repeated TaskRelocationStatus relocationAttempts = 2;
}

// ----------------------------------------------------------------------------
// GRPC services

message TaskRelocationPlans {
    repeated TaskRelocationPlan plans = 1;
}

message TaskRelocationResults {
    repeated TaskRelocationResult results = 1;
}

message TaskRelocationResultQuery {
    /// (Required) Requested page number/size.
    Page page = 1;

    /// (Optional) Collection of fields and their values for a filter.
    // Available query criteria:
    // jobIds - list of comma separated job ids
    // taskIds - list of comma separated task ids
    // owner - job owner
    // applicationName - job application name
    // capacityGroup - job assigned capacity group
    map<string, string> filteringCriteria = 2;

    /// (Optional) If set, only field values explicitly given in this parameter will be returned
    repeated string fields = 3;
}

message RelocationEvent {
    message TaskRelocationPlanEvent {
        TaskRelocationPlan plan = 1;
    }

    message TaskRelocationResultEvent {
        TaskRelocationResult result = 1;
    }

    oneof Event {
        TaskRelocationPlanEvent taskRelocationPlanEvent = 1;
        TaskRelocationResultEvent taskRelocationResultEvent = 2;
    }
}

service TaskRelocationService {

    /// Get the current relocation plan.
    rpc GetCurrentTaskRelocationPlans (google.protobuf.Empty) returns (TaskRelocationPlans) {
    }

    /// Get the previous relocation plans.
    rpc GetTaskRelocationResult (TaskRelocationResultQuery) returns (TaskRelocationResults) {
    }

    /// Observe relocation plans and their execution status.
    rpc ObserveRelocationEvents (google.protobuf.Empty) returns (stream RelocationEvent) {
    }
}
