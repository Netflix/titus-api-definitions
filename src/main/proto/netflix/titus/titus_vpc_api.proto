syntax = "proto3";
package com.netflix.titus;

import "netflix/titus/titus_base.proto";
import "google/protobuf/empty.proto";

option go_package = "titus";

enum Family {
    // Default should never really be used, but we're required to have one due to protobuf
    FAMILY_DEFAULT = 0;
    FAMILY_V4 = 1;
    FAMILY_V6 = 2;
};

message AllocateAddressRequest {
    AddressAllocation addressAllocation = 1;
    Family family = 2;
    string accountId = 3;
};

message AllocateAddressResponse {
    SignedAddressAllocation signedAddressAllocation = 1;
};

message GetAllocationRequest {
    oneof searchParameter {
        string address = 1;
        string uuid = 2;
    }
};

message GetAllocationResponse {
    AddressAllocation addressAllocation = 1;
    SignedAddressAllocation signedAddressAllocation = 2;
};

service UserIPService {
    // Static IP Address flow
    rpc AllocateAddress (AllocateAddressRequest) returns (AllocateAddressResponse);
    rpc GetAllocation (GetAllocationRequest) returns (GetAllocationResponse);
};

message ValidationRequest {
    SignedAddressAllocation signedAddressAllocation = 1;
};

message ValidationResponse {
};

message ParametersValidationRequest {

    string accountId = 1;

    repeated string subnets = 2;

    repeated string securityGroups = 3;
};

message ParametersValidationResponse {

    enum ValidationErrorCode {
        Unknown = 0;
        SubnetNotFound = 1;
        SecurityGroupNotFound = 2;
        AccountIdUnsupported = 3;
        SubnetDoesNotMatchAccountId = 4;
        SubnetsTooDiverse = 5;
    }

    message ValidationFailure {
        // Validation error code.
        oneof errorCodeOneOf {
            ValidationErrorCode errorCode = 1;
        }

        // Failure details.
        string errorMessage = 2;
    };

    message ValidationFailures {

        // One or more validation errors
        repeated ValidationFailure failure = 1;

    }

    // If the following structure does not contain any failure elements, it implies a validation success
    ValidationFailures failures = 1;

};

service ValidatorIPService {
    rpc ValidateAllocation (ValidationRequest) returns (ValidationResponse);
    rpc ValidateAllocationParameters (ParametersValidationRequest) returns (ParametersValidationResponse);
}

// V2 API
message AllocateStaticIPAddressRequest {
    /// Required (The subnet where to allocate the address)
    string subnetId = 1;
    /// Optional. If specified, and an ID with that already exists, it will return an error. 
    /// This allows for idempotent requests.
    string uuid = 2;
    /// Optional. Pool is an indexed column that can be used to select static IPs by.
    string pool = 3;
    /// Optional
    map<string, string> tags = 4;
};

message AllocateStaticIPAddressResponse {
    StaticIPAddress staticIPAddress = 1;
};

message AddressLocationV2 {
    string accountId = 1;
    string availabilityZone = 2;
    string availabilityZoneId = 3;
    string vpcId = 4;
    string subnetId = 5;
};

message StaticIPAddress {
    string uuid = 1;
    string ipv4Address = 2;
    string ipv6Address = 3;
    string pool = 4;
    map<string, string> tags = 5;
    AddressLocationV2 addressLocation = 6;
};

message SetPoolRequest {
    string uuid = 1;
    // If Pool is unset, it's equivalent of removing it from that pool
    string pool = 2;
};

message SetPoolResponse {
};

message CreateTagRequest {
    string uuid = 1;
    string key = 2;
    string value = 3;
    // If upsert is false, and the tag exists, this call will fail.
    bool upsert = 4;
};

message CreateTagResponse {
};

message DeleteTagRequest {
    string uuid = 1;
    string key = 2;
};

message DeleteTagResponse {
};

// If the tag is unset, then do not set it
message UpdateTagRequest {
    string uuid = 1;
    string key = 2;
    string value = 3;
};

message UpdateTagResponse {
};

message AddressSearchParameter {
    /// Either an IPv4 or IPv6 address. If it's an IPv4 address, then subnetId or vpcId have to be specified
    string address = 1;
    oneof location {
        // This can be empty if address is a v6 address, otherwise it must be specified
        google.protobuf.Empty empty = 2;
        string subnetId = 3;
        string vpcId = 4;
    }
};

message GetStaticIPAddressRequest {
    oneof searchParameter {
        string uuid = 1;
        AddressSearchParameter addressSearchParameter = 2;
    }
};

message GetStaticIPAddressResponse {
    StaticIPAddress staticIPAddress = 1;
};

// This is really only meant to be used by (the) control plane(s)
message GetStaticIPAddressesRequest {
    oneof searchParameter {
        string pool = 1;
        StaticIPAddressIDs addresses = 2;
    }
};

message GetStaticIPAddressesResponse {
    repeated StaticIPAddress staticIPAddresses = 1;
};

service IPService {
    rpc AllocateStaticIPAddress (AllocateStaticIPAddressRequest) returns (AllocateStaticIPAddressResponse);
    rpc SetPool (SetPoolRequest) returns (SetPoolResponse);
    rpc CreateTag (CreateTagRequest) returns (CreateTagResponse);
    rpc DeleteTag (CreateTagRequest) returns (DeleteTagResponse);
    rpc UpdateTag (UpdateTagRequest) returns (UpdateTagResponse);
    rpc GetStaticIPAddress (GetStaticIPAddressRequest) returns (GetStaticIPAddressResponse);
    rpc GetStaticIPAddresses (GetStaticIPAddressesRequest) returns (GetStaticIPAddressesResponse);
};

message GetBranchToTrunkENIMappingRequest {
}

message GetBranchToTrunkENIMappingResponse {
    // This map is branchENI => trunkENI
    map<string, string> branchENIMapping = 1;
}

service TitusAgentVPCInformationService {
    rpc ListBranchToTrunkENIMapping (GetBranchToTrunkENIMappingRequest) returns (GetBranchToTrunkENIMappingResponse);
}
