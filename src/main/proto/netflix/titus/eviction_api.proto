syntax = "proto3";

// WORK IN PROGRESS
// This API is likely to change.

// Titus task eviction API specification.
//

package com.netflix.titus;

import "netflix/titus/titus_base.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "EvictionProto";

option go_package = "titus";

// ----------------------------------------------------------------------------
// Eviction core data structures

/// The system distruption budget provides an upper bound on allowed number of task evictions. The system
//  disruption budget is defined at the global, tier and a capacity group level.
message SystemDisruptionBudget {
    /// System layer/entity refrence.
    Reference reference = 1;

    /// (Required) Bucket refill rate per second.
    uint32 rate = 2;

    /// (Required) Eviction burst.
    uint32 bucket = 3;
}

/// Current eviction quota at the global, tier, capacity group, and job level.
//  For example, for the global disruption budget with the bucket size of 100 half empty, the eviction quota is 50.
message EvictionQuota {
    /// System layer/entity refrence.
    Reference reference = 1;

    /// (Required) Total number of tasks that can be evicted at a given point in time.
    uint32 quota = 2;
}

// ----------------------------------------------------------------------------
// GRPC services

message EvictionQuotaQuery {
    /// An entity reference (global, tier, etc) for which the available quota should be returned.
    Reference reference = 1;

    /// If set to true, the direct children subquotas are returned as well.
    bool inlcudeChildren = 2;
}

message EvictionQueryResponse {
    EvictionQuota quota = 1;

    repeated EvictionQueryResponse nestedQuotas = 2;
}

message TaskTerminateRequest {
    string taskId = 1;
}

message TaskTerminateResponse {
    /// Set to true if the termination request was accepted.
    bool allowed = 1;

    /// If a termination request is not accepted, this field contains the reason code explaining why:
    //  * aboveSystemDisruptionBudget
    //  * aboveTierDisruptionBudget
    //  * aboveCapacityGroupDisruptionBudget
    //  * jobRelocationPolicyViolation
    string reasonCode = 2;

    /// If a termination request is not accepted, contains explanation why.
    string reasonMessage = 3;
}

message ObserverEventRequest {
    bool includeSnapshot = 2;
}

message EvictionServiceEvent {
    message SnapshotEnd {
    }

    message SystemDisruptionBudgetUpdateEvent {
        SystemDisruptionBudget current = 1;
    }

    message TaskTerminationEvent {
        string taskId = 1;
        bool approved = 2;
    }

    oneof Event {
        SnapshotEnd snapshotEnd = 1;

        SystemDisruptionBudgetUpdateEvent systemDisruptionBudgetUpdateEvent = 2;

        TaskTerminationEvent taskTerminationEvent = 3;
    }
}

service EvictionService {

    rpc GetSystemDisruptionBudget (Reference) returns (SystemDisruptionBudget) {
    }

    /// Get information about the current eviction quotas.
    rpc GetEvictionQuotas (EvictionQuotaQuery) returns (EvictionQueryResponse) {
    }

    /// Terminate a task.
    rpc TerminateTask (TaskTerminateRequest) returns (TaskTerminateResponse) {
    }

    /// Event stream with the disruption budge updates and task termination requests.
    rpc ObserveEvents (ObserverEventRequest) returns (stream EvictionServiceEvent) {
    }
}